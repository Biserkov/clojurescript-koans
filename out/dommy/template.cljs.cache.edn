;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name dommy.template, :imports nil, :requires {str clojure.string, clojure.string clojure.string, attrs dommy.attrs, dommy.attrs dommy.attrs}, :uses nil, :defs {next-css-index {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/template.cljs", :line 12, :column 7, :end-line 12, :end-column 21, :arglists (quote ([s start-idx])), :doc "index of css character (#,.) in base-element. bottleneck"}, :name dommy.template/next-css-index, :variadic false, :file "out/dommy/template.cljs", :end-column 21, :method-params ([s start-idx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s start-idx])), :doc "index of css character (#,.) in base-element. bottleneck"}, PElement {:meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/template.cljs", :line 9, :column 14, :end-line 9, :end-column 22, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-elem [[this]]}}}, :protocol-symbol true, :name dommy.template/PElement, :file "out/dommy/template.cljs", :end-column 22, :column 1, :line 9, :protocol-info {:methods {-elem [[this]]}}, :info nil, :end-line 9, :impls #{js/Text js/HTMLElement js/Window js/DocumentFragment number cljs.core/PersistentVector js/Document js/SVGElement string}, :doc nil, :jsdoc ("@interface")}, html->nodes {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/template.cljs", :line 134, :column 7, :end-line 134, :end-column 18, :arglists (quote ([html]))}, :name dommy.template/html->nodes, :variadic false, :file "out/dommy/template.cljs", :end-column 18, :method-params ([html]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 134, :end-line 134, :max-fixed-arity 1, :fn-var true, :arglists (quote ([html]))}, -elem {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/template.cljs", :line 10, :column 4, :end-line 10, :end-column 9, :protocol dommy.template/PElement, :doc "return the element representation of this", :arglists (quote ([this]))}, :protocol dommy.template/PElement, :name dommy.template/-elem, :variadic false, :file "out/dommy/template.cljs", :end-column 9, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "return the element representation of this"}, ->document-fragment {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/template.cljs", :line 50, :column 7, :end-line 50, :end-column 26, :arglists (quote ([data] [result-frag data])), :doc "take data and return a document fragment", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([data] [result-frag data]), :arglists ([data] [result-frag data]), :arglists-meta (nil nil)}}, :name dommy.template/->document-fragment, :variadic false, :file "out/dommy/template.cljs", :end-column 26, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([data] [result-frag data]), :arglists ([data] [result-frag data]), :arglists-meta (nil nil)}, :method-params ([data] [result-frag data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 2, :fn-var true, :arglists ([data] [result-frag data]), :doc "take data and return a document fragment"}, compound-element {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/template.cljs", :line 78, :column 7, :end-line 78, :end-column 23, :arglists (quote ([[tag-name maybe-attrs & children]])), :doc "element with either attrs or nested children [:div [:span \"Hello\"]]"}, :name dommy.template/compound-element, :variadic false, :file "out/dommy/template.cljs", :end-column 23, :method-params ([p__7810]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[tag-name maybe-attrs & children]])), :doc "element with either attrs or nested children [:div [:span \"Hello\"]]"}, node {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/template.cljs", :line 129, :column 7, :end-line 129, :end-column 11, :arglists (quote ([data]))}, :name dommy.template/node, :variadic false, :file "out/dommy/template.cljs", :end-column 11, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data]))}, base-element {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/template.cljs", :line 22, :column 7, :end-line 22, :end-column 19, :arglists (quote ([node-key])), :doc "dom element from css-style keyword like :a.class1 or :span#my-span.class"}, :name dommy.template/base-element, :variadic false, :file "out/dommy/template.cljs", :end-column 19, :method-params ([node-key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node-key])), :doc "dom element from css-style keyword like :a.class1 or :span#my-span.class"}, throw-unable-to-make-node {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/template.cljs", :line 47, :column 7, :end-line 47, :end-column 32, :arglists (quote ([node-data]))}, :name dommy.template/throw-unable-to-make-node, :variadic false, :file "out/dommy/template.cljs", :end-column 32, :method-params ([node-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node-data]))}, +svg-tags+ {:name dommy.template/+svg-tags+, :file "out/dommy/template.cljs", :line 7, :column 1, :end-line 7, :end-column 16, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/template.cljs", :line 7, :column 6, :end-line 7, :end-column 16}}, +svg-ns+ {:name dommy.template/+svg-ns+, :file "out/dommy/template.cljs", :line 6, :column 1, :end-line 6, :end-column 14, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/template.cljs", :line 6, :column 6, :end-line 6, :end-column 14}}, ->node-like {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/template.cljs", :line 70, :column 7, :end-line 70, :end-column 18, :arglists (quote ([data])), :doc "take data and return DOM node if it satisfies PElement and tries to\n   make a document fragment otherwise"}, :name dommy.template/->node-like, :variadic false, :file "out/dommy/template.cljs", :end-column 18, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data])), :doc "take data and return DOM node if it satisfies PElement and tries to\n   make a document fragment otherwise"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else}, :order [:else]}, :doc nil}