;; Analyzed by ClojureScript 1.7.228
{:use-macros {node dommy.macros}, :excludes #{}, :name dommy.attrs, :imports nil, :requires {str clojure.string, clojure.string clojure.string}, :uses nil, :defs {scroll-into-view {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/attrs.cljs", :line 229, :column 7, :end-line 229, :end-column 23, :arglists (quote ([elem align-with-top?]))}, :name dommy.attrs/scroll-into-view, :variadic false, :file "out/dommy/attrs.cljs", :end-column 23, :method-params ([elem align-with-top?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 229, :end-line 229, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem align-with-top?]))}, toggle-attr! {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/attrs.cljs", :line 190, :column 7, :end-line 190, :end-column 19, :arglists (quote ([elem k] [elem k add?])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([elem k] [elem k add?]), :arglists ([elem k] [elem k add?]), :arglists-meta (nil nil)}}, :name dommy.attrs/toggle-attr!, :variadic false, :file "out/dommy/attrs.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([elem k] [elem k add?]), :arglists ([elem k] [elem k add?]), :arglists-meta (nil nil)}, :method-params ([elem k] [elem k add?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 190, :end-line 190, :max-fixed-arity 3, :fn-var true, :arglists ([elem k] [elem k add?])}, show! {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/attrs.cljs", :line 216, :column 7, :end-line 216, :end-column 12, :arglists (quote ([elem]))}, :name dommy.attrs/show!, :variadic false, :file "out/dommy/attrs.cljs", :end-column 12, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 216, :end-line 216, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem]))}, hide! {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/attrs.cljs", :line 213, :column 7, :end-line 213, :end-column 12, :arglists (quote ([elem]))}, :name dommy.attrs/hide!, :variadic false, :file "out/dommy/attrs.cljs", :end-column 12, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 213, :end-line 213, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem]))}, set-style! {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/attrs.cljs", :line 120, :column 7, :end-line 120, :end-column 17, :arglists (quote ([elem & kvs])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(elem kvs)], :arglists ([elem & kvs]), :arglists-meta (nil)}}, :name dommy.attrs/set-style!, :variadic true, :file "out/dommy/attrs.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(elem kvs)], :arglists ([elem & kvs]), :arglists-meta (nil)}, :method-params [(elem kvs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 1, :fn-var true, :arglists ([elem & kvs])}, has-class? {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/attrs.cljs", :line 32, :column 16, :end-line 32, :end-column 26, :tag boolean, :arglists (quote ([elem class])), :doc "Does an HTML element have a class. Uses Element::classList if\n   available and otherwise does fast parse of className string"}, :name dommy.attrs/has-class?, :variadic false, :file "out/dommy/attrs.cljs", :end-column 26, :method-params ([elem class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :ret-tag boolean, :end-line 32, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([elem class])), :doc "Does an HTML element have a class. Uses Element::classList if\n   available and otherwise does fast parse of className string"}, set-attr! {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/attrs.cljs", :line 144, :column 7, :end-line 144, :end-column 16, :arglists (quote ([elem k] [elem k v] [elem k v & kvs])), :doc "Sets dom attributes on and returns `elem`.\n   Attributes without values will be set to \"true\":\n\n       (set-attr! elem :disabled)\n\n   With values, the function takes variadic kv pairs:\n\n       (set-attr! elem :id \"some-id\"\n                       :name \"some-name\")", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([elem k] [elem k v]), :arglists ([elem k] [elem k v] [elem k v & kvs]), :arglists-meta (nil nil nil)}}, :name dommy.attrs/set-attr!, :variadic true, :file "out/dommy/attrs.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([elem k] [elem k v]), :arglists ([elem k] [elem k v] [elem k v & kvs]), :arglists-meta (nil nil nil)}, :method-params ([elem k] [elem k v]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 144, :end-line 144, :max-fixed-arity 3, :fn-var true, :arglists ([elem k] [elem k v] [elem k v & kvs]), :doc "Sets dom attributes on and returns `elem`.\n   Attributes without values will be set to \"true\":\n\n       (set-attr! elem :disabled)\n\n   With values, the function takes variadic kv pairs:\n\n       (set-attr! elem :id \"some-id\"\n                       :name \"some-name\")"}, attr {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/attrs.cljs", :line 186, :column 7, :end-line 186, :end-column 11, :arglists (quote ([elem k]))}, :name dommy.attrs/attr, :variadic false, :file "out/dommy/attrs.cljs", :end-column 11, :method-params ([elem k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 186, :end-line 186, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem k]))}, add-class! {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/attrs.cljs", :line 44, :column 7, :end-line 44, :end-column 17, :arglists (quote ([elem classes] [elem classes & more-classes])), :doc "add class to element", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([elem classes]), :arglists ([elem classes] [elem classes & more-classes]), :arglists-meta (nil nil)}}, :name dommy.attrs/add-class!, :variadic true, :file "out/dommy/attrs.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([elem classes]), :arglists ([elem classes] [elem classes & more-classes]), :arglists-meta (nil nil)}, :method-params ([elem classes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists ([elem classes] [elem classes & more-classes]), :doc "add class to element"}, class-match? {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/attrs.cljs", :line 7, :column 17, :end-line 7, :end-column 29, :tag boolean, :private true, :arglists (quote ([class-name class idx])), :doc "does class-name string have class starting at index idx.\n   only will be used when Element::classList doesn't exist"}, :private true, :name dommy.attrs/class-match?, :variadic false, :file "out/dommy/attrs.cljs", :end-column 29, :method-params ([class-name class idx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :ret-tag boolean, :end-line 7, :max-fixed-arity 3, :tag boolean, :fn-var true, :arglists (quote ([class-name class idx])), :doc "does class-name string have class starting at index idx.\n   only will be used when Element::classList doesn't exist"}, remove-class! {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/attrs.cljs", :line 77, :column 7, :end-line 77, :end-column 20, :arglists (quote ([elem class] [elem class & classes])), :doc "remove class from and returns `elem`", :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([elem class]), :arglists ([elem class] [elem class & classes]), :arglists-meta (nil nil)}}, :name dommy.attrs/remove-class!, :variadic true, :file "out/dommy/attrs.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([elem class]), :arglists ([elem class] [elem class & classes]), :arglists-meta (nil nil)}, :method-params ([elem class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 2, :fn-var true, :arglists ([elem class] [elem class & classes]), :doc "remove class from and returns `elem`"}, set-px! {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/attrs.cljs", :line 132, :column 7, :end-line 132, :end-column 14, :arglists (quote ([elem & kvs])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(elem kvs)], :arglists ([elem & kvs]), :arglists-meta (nil)}}, :name dommy.attrs/set-px!, :variadic true, :file "out/dommy/attrs.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(elem kvs)], :arglists ([elem & kvs]), :arglists-meta (nil)}, :method-params [(elem kvs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 132, :end-line 132, :max-fixed-arity 1, :fn-var true, :arglists ([elem & kvs])}, class-index {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/attrs.cljs", :line 21, :column 8, :end-line 21, :end-column 19, :private true, :arglists (quote ([class-name class])), :doc "Finds the index of class in a space-delimited class-name\n    only will be used when Element::classList doesn't exist"}, :private true, :name dommy.attrs/class-index, :variadic false, :file "out/dommy/attrs.cljs", :end-column 19, :method-params ([class-name class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([class-name class])), :doc "Finds the index of class in a space-delimited class-name\n    only will be used when Element::classList doesn't exist"}, style-str {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/attrs.cljs", :line 113, :column 8, :end-line 113, :end-column 17, :private true, :arglists (quote ([x]))}, :private true, :name dommy.attrs/style-str, :variadic false, :file "out/dommy/attrs.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, px {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/attrs.cljs", :line 139, :column 7, :end-line 139, :end-column 9, :arglists (quote ([elem k]))}, :name dommy.attrs/px, :variadic false, :file "out/dommy/attrs.cljs", :end-column 9, :method-params ([elem k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem k]))}, remove-attr! {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/attrs.cljs", :line 173, :column 7, :end-line 173, :end-column 19, :arglists (quote ([elem k] [elem k & ks])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([elem k]), :arglists ([elem k] [elem k & ks]), :arglists-meta (nil nil)}}, :name dommy.attrs/remove-attr!, :variadic true, :file "out/dommy/attrs.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 2, :method-params ([elem k]), :arglists ([elem k] [elem k & ks]), :arglists-meta (nil nil)}, :method-params ([elem k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 173, :end-line 173, :max-fixed-arity 2, :fn-var true, :arglists ([elem k] [elem k & ks])}, remove-class-str {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/attrs.cljs", :line 67, :column 8, :end-line 67, :end-column 24, :private true, :arglists (quote ([init-class-name class]))}, :private true, :name dommy.attrs/remove-class-str, :variadic false, :file "out/dommy/attrs.cljs", :end-column 24, :method-params ([init-class-name class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 2, :fn-var true, :arglists (quote ([init-class-name class]))}, style {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/attrs.cljs", :line 128, :column 7, :end-line 128, :end-column 12, :arglists (quote ([elem k]))}, :name dommy.attrs/style, :variadic false, :file "out/dommy/attrs.cljs", :end-column 12, :method-params ([elem k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem k]))}, toggle-class! {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/attrs.cljs", :line 94, :column 7, :end-line 94, :end-column 20, :arglists (quote ([elem class] [elem class add?])), :doc "(toggle-class! elem class) will add-class! if elem does not have class\n   and remove-class! otherwise.\n   (toggle-class! elem class add?) will add-class! if add? is truthy,\n   otherwise it will remove-class!", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([elem class] [elem class add?]), :arglists ([elem class] [elem class add?]), :arglists-meta (nil nil)}}, :name dommy.attrs/toggle-class!, :variadic false, :file "out/dommy/attrs.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([elem class] [elem class add?]), :arglists ([elem class] [elem class add?]), :arglists-meta (nil nil)}, :method-params ([elem class] [elem class add?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 3, :fn-var true, :arglists ([elem class] [elem class add?]), :doc "(toggle-class! elem class) will add-class! if elem does not have class\n   and remove-class! otherwise.\n   (toggle-class! elem class add?) will add-class! if add? is truthy,\n   otherwise it will remove-class!"}, hidden? {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/attrs.cljs", :line 199, :column 16, :end-line 199, :end-column 23, :tag boolean, :arglists (quote ([elem]))}, :name dommy.attrs/hidden?, :variadic false, :file "out/dommy/attrs.cljs", :end-column 23, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 199, :ret-tag boolean, :end-line 199, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([elem]))}, bounding-client-rect {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/attrs.cljs", :line 219, :column 7, :end-line 219, :end-column 27, :arglists (quote ([elem])), :doc "Returns a map of the bounding client rect of `elem`\n   as a map with [:top :left :right :bottom :width :height]"}, :name dommy.attrs/bounding-client-rect, :variadic false, :file "out/dommy/attrs.cljs", :end-column 27, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 219, :end-line 219, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem])), :doc "Returns a map of the bounding client rect of `elem`\n   as a map with [:top :left :right :bottom :width :height]"}, toggle! {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/out/dommy/attrs.cljs", :line 202, :column 7, :end-line 202, :end-column 14, :arglists (quote ([elem show?] [elem])), :doc "Display or hide the given `elem`. Takes an optional boolean `show?`\n   indicating whether to show or hide `elem`.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([elem show?] [elem]), :arglists ([elem show?] [elem]), :arglists-meta (nil nil)}}, :name dommy.attrs/toggle!, :variadic false, :file "out/dommy/attrs.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([elem show?] [elem]), :arglists ([elem show?] [elem]), :arglists-meta (nil nil)}, :method-params ([elem show?] [elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 202, :end-line 202, :max-fixed-arity 2, :fn-var true, :arglists ([elem show?] [elem]), :doc "Display or hide the given `elem`. Takes an optional boolean `show?`\n   indicating whether to show or hide `elem`."}}, :require-macros {dommy.macros dommy.macros}, :cljs.analyzer/constants {:seen #{:top kvs even? :style :class k count :keywordize-keys :classes}, :order [even? count kvs k :style :class :classes :keywordize-keys :top]}, :doc nil}