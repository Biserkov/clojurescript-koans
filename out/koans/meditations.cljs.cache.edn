;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name koans.meditations, :imports nil, :requires {koans.meditations.destructuring koans.meditations.destructuring, creating-functions koans.meditations.creating-functions, koans.meditations.creating-functions koans.meditations.creating-functions, koans.meditations.partition koans.meditations.partition, conditionals koans.meditations.conditionals, sequence-comprehensions koans.meditations.sequence-comprehensions, koans.meditations.sets koans.meditations.sets, koans.meditations.sequence-comprehensions koans.meditations.sequence-comprehensions, higher-order-functions koans.meditations.higher-order-functions, koans.meditations.vectors koans.meditations.vectors, sets koans.meditations.sets, koans.meditations.equality koans.meditations.equality, koans.meditations.atoms koans.meditations.atoms, datatypes koans.meditations.datatypes, destructuring koans.meditations.destructuring, koans.meditations.higher-order-functions koans.meditations.higher-order-functions, equality koans.meditations.equality, koans.meditations.datatypes koans.meditations.datatypes, lists koans.meditations.lists, atoms koans.meditations.atoms, koans.meditations.functions koans.meditations.functions, koans.meditations.lazy-sequences koans.meditations.lazy-sequences, koans.utils koans.utils, vectors koans.meditations.vectors, koans.meditations.runtime-polymorphism koans.meditations.runtime-polymorphism, functions koans.meditations.functions, koans.meditations.lists koans.meditations.lists, koans.meditations.conditionals koans.meditations.conditionals, partition koans.meditations.partition, runtime-polymorphism koans.meditations.runtime-polymorphism, lazy-sequences koans.meditations.lazy-sequences, koans.meditations.maps koans.meditations.maps, maps koans.meditations.maps, utils koans.utils, clojure.string clojure.string}, :uses nil, :defs {->KoanIndex {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/meditations.cljs", :line 24, :column 12, :end-line 24, :end-column 21, :internal-ctor true, :factory :positional, :arglists (quote ([category index]))}, :name koans.meditations/->KoanIndex, :variadic false, :file "src/koans/meditations.cljs", :end-column 21, :method-params ([category index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 24, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([category index]))}, next-koan-index {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/meditations.cljs", :line 62, :column 7, :end-line 62, :end-column 22, :arglists (quote ([koan]))}, :name koans.meditations/next-koan-index, :variadic false, :file "src/koans/meditations.cljs", :end-column 22, :method-params ([koan]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([koan]))}, expr-to-string {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/meditations.cljs", :line 57, :column 7, :end-line 57, :end-column 21, :arglists (quote ([expr]))}, :name koans.meditations/expr-to-string, :variadic false, :file "src/koans/meditations.cljs", :end-column 21, :method-params ([expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([expr]))}, map->KoanIndex {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/meditations.cljs", :line 24, :column 12, :end-line 24, :end-column 21, :internal-ctor true, :factory :map, :arglists (quote ([G__7264]))}, :name koans.meditations/map->KoanIndex, :variadic false, :file "src/koans/meditations.cljs", :end-column 21, :method-params ([G__7264]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__7264]))}, next-category {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/meditations.cljs", :line 53, :column 7, :end-line 53, :end-column 20, :arglists (quote ([koan-index]))}, :name koans.meditations/next-category, :variadic false, :file "src/koans/meditations.cljs", :end-column 20, :method-params ([koan-index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([koan-index]))}, ->Koan {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/meditations.cljs", :line 23, :column 12, :end-line 23, :end-column 16, :internal-ctor true, :factory :positional, :arglists (quote ([description code-strings fn-strings]))}, :name koans.meditations/->Koan, :variadic false, :file "src/koans/meditations.cljs", :end-column 16, :method-params ([description code-strings fn-strings]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 23, :end-line 23, :max-fixed-arity 3, :fn-var true, :arglists (quote ([description code-strings fn-strings]))}, map->Koan {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/meditations.cljs", :line 23, :column 12, :end-line 23, :end-column 16, :internal-ctor true, :factory :map, :arglists (quote ([G__7256]))}, :name koans.meditations/map->Koan, :variadic false, :file "src/koans/meditations.cljs", :end-column 16, :method-params ([G__7256]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__7256]))}, map->Category {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/meditations.cljs", :line 25, :column 12, :end-line 25, :end-column 20, :internal-ctor true, :factory :map, :arglists (quote ([G__7272]))}, :name koans.meditations/map->Category, :variadic false, :file "src/koans/meditations.cljs", :end-column 20, :method-params ([G__7272]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__7272]))}, KoanIndex {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name koans.meditations/KoanIndex, :file "src/koans/meditations.cljs", :end-column 21, :type true, :column 12, :internal-ctor true, :line 24, :record true, :end-line 24, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->Category {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/meditations.cljs", :line 25, :column 12, :end-line 25, :end-column 20, :internal-ctor true, :factory :positional, :arglists (quote ([name koans fns]))}, :name koans.meditations/->Category, :variadic false, :file "src/koans/meditations.cljs", :end-column 20, :method-params ([name koans fns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 25, :end-line 25, :max-fixed-arity 3, :fn-var true, :arglists (quote ([name koans fns]))}, Category {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name koans.meditations/Category, :file "src/koans/meditations.cljs", :end-column 20, :type true, :column 12, :internal-ctor true, :line 25, :record true, :end-line 25, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, Koan {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name koans.meditations/Koan, :file "src/koans/meditations.cljs", :end-column 16, :type true, :column 12, :internal-ctor true, :line 23, :record true, :end-line 23, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, categories {:name koans.meditations/categories, :file "src/koans/meditations.cljs", :line 27, :column 1, :end-line 27, :end-column 16, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/meditations.cljs", :line 27, :column 6, :end-line 27, :end-column 16}}, koan-for-index {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/meditations.cljs", :line 83, :column 7, :end-line 83, :end-column 21, :arglists (quote ([koan-index]))}, :name koans.meditations/koan-for-index, :variadic false, :file "src/koans/meditations.cljs", :end-column 21, :method-params ([koan-index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 1, :fn-var true, :arglists (quote ([koan-index]))}, expr-to-array {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/meditations.cljs", :line 74, :column 7, :end-line 74, :end-column 20, :arglists (quote ([expr]))}, :name koans.meditations/expr-to-array, :variadic false, :file "src/koans/meditations.cljs", :end-column 20, :method-params ([expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 1, :fn-var true, :arglists (quote ([expr]))}, koan-exists? {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/meditations.cljs", :line 50, :column 7, :end-line 50, :end-column 19, :arglists (quote ([koan-index]))}, :name koans.meditations/koan-exists?, :variadic false, :file "src/koans/meditations.cljs", :end-column 19, :method-params ([koan-index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([koan-index]))}, category-from-koan-index {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/meditations.cljs", :line 47, :column 7, :end-line 47, :end-column 31, :arglists (quote ([koan-index]))}, :name koans.meditations/category-from-koan-index, :variadic false, :file "src/koans/meditations.cljs", :end-column 31, :method-params ([koan-index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([koan-index]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:description :category :fns :index :else category description :name fns index :the :code-strings :koans name code-strings :fn-strings koans :input :end fn-strings}, :order [:description :code-strings :fn-strings description code-strings fn-strings :category :index category index :name :koans :fns name koans fns :the :end :else :input]}, :doc nil}