;; Analyzed by ClojureScript 1.7.228
{:use-macros {deftemplate dommy.macros}, :excludes #{}, :name koans.core, :imports nil, :requires {cljs cljs.js, dommy dommy.core, cljs.js cljs.js, meditations koans.meditations, clojure.set clojure.set, jayq.core jayq.core, koans.meditations koans.meditations, $ jayq.core, dommy.core dommy.core, clojure.string clojure.string, jayq.util jayq.util}, :uses {log jayq.util, $ jayq.core, wait jayq.util}, :defs {error-message {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/core.cljs", :line 49, :column 14, :end-line 49, :end-column 27, :arglists (quote ([]))}, :name koans.core/error-message, :variadic false, :file "src/koans/core.cljs", :end-column 27, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, input-with-code {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/core.cljs", :line 28, :column 14, :end-line 28, :end-column 29, :arglists (quote ([koan]))}, :name koans.core/input-with-code, :variadic false, :file "src/koans/core.cljs", :end-column 29, :method-params ([koan]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([koan]))}, fadeout-time {:name koans.core/fadeout-time, :file "src/koans/core.cljs", :line 24, :column 1, :end-line 24, :end-column 18, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/core.cljs", :line 24, :column 6, :end-line 24, :end-column 18}}, hash-objects {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/core.cljs", :line 14, :column 7, :end-line 14, :end-column 19, :arglists (quote ([]))}, :name koans.core/hash-objects, :variadic false, :file "src/koans/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, load-next-koan {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/core.cljs", :line 64, :column 7, :end-line 64, :end-column 21, :arglists (quote ([]))}, :name koans.core/load-next-koan, :variadic false, :file "src/koans/core.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, category-name {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/core.cljs", :line 75, :column 7, :end-line 75, :end-column 20, :arglists (quote ([koan-index]))}, :name koans.core/category-name, :variadic false, :file "src/koans/core.cljs", :end-column 20, :method-params ([koan-index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([koan-index]))}, show-error-message {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/core.cljs", :line 131, :column 7, :end-line 131, :end-column 25, :arglists (quote ([]))}, :name koans.core/show-error-message, :variadic false, :file "src/koans/core.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, current-koan-index {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/core.cljs", :line 16, :column 7, :end-line 16, :end-column 25, :arglists (quote ([]))}, :name koans.core/current-koan-index, :variadic false, :file "src/koans/core.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, remove-static-pages {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/core.cljs", :line 72, :column 7, :end-line 72, :end-column 26, :arglists (quote ([]))}, :name koans.core/remove-static-pages, :variadic false, :file "src/koans/core.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, init {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/core.cljs", :line 170, :column 7, :end-line 170, :end-column 11, :arglists (quote ([]))}, :name koans.core/init, :variadic false, :file "src/koans/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 170, :end-line 170, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, render-static-page {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/core.cljs", :line 96, :column 7, :end-line 96, :end-column 25, :arglists (quote ([selector]))}, :name koans.core/render-static-page, :variadic false, :file "src/koans/core.cljs", :end-column 25, :method-params ([selector]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 1, :fn-var true, :arglists (quote ([selector]))}, evaluate-koan {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/core.cljs", :line 148, :column 7, :end-line 148, :end-column 20, :arglists (quote ([]))}, :name koans.core/evaluate-koan, :variadic false, :file "src/koans/core.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, char-width {:name koans.core/char-width, :file "src/koans/core.cljs", :line 25, :column 1, :end-line 25, :end-column 16, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/core.cljs", :line 25, :column 6, :end-line 25, :end-column 16}}, render-current-koan {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/core.cljs", :line 105, :column 7, :end-line 105, :end-column 26, :arglists (quote ([]))}, :name koans.core/render-current-koan, :variadic false, :file "src/koans/core.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, handle-hashchange {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/core.cljs", :line 166, :column 7, :end-line 166, :end-column 24, :arglists (quote ([]))}, :name koans.core/handle-hashchange, :variadic false, :file "src/koans/core.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, handle-document-ready {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/core.cljs", :line 159, :column 7, :end-line 159, :end-column 28, :arglists (quote ([]))}, :name koans.core/handle-document-ready, :variadic false, :file "src/koans/core.cljs", :end-column 28, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, update-location-hash {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/core.cljs", :line 20, :column 7, :end-line 20, :end-column 27, :arglists (quote ([]))}, :name koans.core/update-location-hash, :variadic false, :file "src/koans/core.cljs", :end-column 27, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, remove-active-koan {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/core.cljs", :line 67, :column 7, :end-line 67, :end-column 25, :arglists (quote ([]))}, :name koans.core/remove-active-koan, :variadic false, :file "src/koans/core.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, compiler-state {:name koans.core/compiler-state, :file "src/koans/core.cljs", :line 145, :column 1, :end-line 145, :end-column 24, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/core.cljs", :line 145, :column 10, :end-line 145, :end-column 24}}, render-koan {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/core.cljs", :line 79, :column 7, :end-line 79, :end-column 18, :arglists (quote ([koan]))}, :name koans.core/render-koan, :variadic false, :file "src/koans/core.cljs", :end-column 18, :method-params ([koan]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 1, :fn-var true, :arglists (quote ([koan]))}, resize-input {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/core.cljs", :line 117, :column 7, :end-line 117, :end-column 19, :arglists (quote ([input]))}, :name koans.core/resize-input, :variadic false, :file "src/koans/core.cljs", :end-column 19, :method-params ([input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 1, :fn-var true, :arglists (quote ([input]))}, input-string {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/core.cljs", :line 52, :column 7, :end-line 52, :end-column 19, :arglists (quote ([]))}, :name koans.core/input-string, :variadic false, :file "src/koans/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, enter-key {:name koans.core/enter-key, :file "src/koans/core.cljs", :line 26, :column 1, :end-line 26, :end-column 15, :meta {:file "/Users/mkremins/Projects/clojurescript-koans/src/koans/core.cljs", :line 26, :column 6, :end-line 26, :end-column 15}}}, :require-macros {dommy.macros dommy.macros, cljs cljs.js, cljs.js cljs.js}, :cljs.analyzer/constants {:seen #{:description :.shadow :.static :category :pre :index :.text :else :name :value :.code-box :keypress :.koan :code-strings ns :div :click :.error :class :fn-strings :error :input :body :.category :span cljs.user :eval}, :order [:category :index :description :input :span :class :name :code-strings :fn-strings :div :pre :.koan :.static :.category :body :else :.shadow :.code-box :.error :eval :error :value :click :.text :keypress ns cljs.user]}, :doc nil}