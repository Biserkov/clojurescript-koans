// Compiled by ClojureScript 1.7.228 {}
goog.provide('koans.meditations.partition');
goog.require('cljs.core');
koans.meditations.partition.koans = cljs.core.list("To split a collection you can use the partition function","(= '((0 1) (2 3)) (:__ 2 (range 4)))","But watch out if there are not enough elements to form n sequences",cljs.core.list(new cljs.core.Symbol(null,"=","=",-1501502141,null),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Keyword(null,"__","__",-223697812))),cljs.core.list(new cljs.core.Symbol(null,"partition","partition",-1479695018,null),(3),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"a","a",-2123407586),new cljs.core.Keyword(null,"b","b",1482224470),new cljs.core.Keyword(null,"c","c",-1763192079),new cljs.core.Keyword(null,"d","d",1972142424),new cljs.core.Keyword(null,"e","e",1381269198)], null))),"You can use partition-all to also get partitions with less than n elements",cljs.core.list(new cljs.core.Symbol(null,"=","=",-1501502141,null),new cljs.core.Keyword(null,"__","__",-223697812),cljs.core.list(new cljs.core.Symbol(null,"partition-all","partition-all",-1985005385,null),(3),cljs.core.list(new cljs.core.Symbol(null,"range","range",-1014743483,null),(5)))),"If you need to, you can start each sequence with an offset","(= '((0 1 2) (5 6 7) (10 11 12)) (partition 3 :__ (range 13)))","Consider padding the last sequence with some default values..","(= '((0 1 2) (3 4 5) (6 :hello)) (partition 3 3 [:__] (range 7)))",".. but notice that they will only pad up to given sequence length","(= '( (0 1 2) (3 4 5) :__) (partition 3 3 [:this :are \"my\" \"words\"] (range 7)))");

//# sourceMappingURL=partition.js.map